Joi -> used to validate our schema
>> with the help of Joi- we define a schema , this schema is not our mongoose schema , this is our server side validation schema


Mongo RelationShips
>> One to Many / Approach 1 (one to few)
-> Store the child document inside a parent

>> One to Many / Approach 2
-> Store a reference to the child document inside parent

>> One to Many / Approach 3 (one to squillions)
-> Store a reference to the parent document inside child


--
Mongo $pull operator
-> the $pull operator removes from an existing array all instances of a value or values that match a specified condition

----
IMPORTANT CONCEPTS IN Backend

>>>  Express Router
-> Express routers are a way to organize your express application such that our primary app.js does not become bloated
-> they basically help us to restructure our code in a more readable format 

---
COOKIES
(Web cookies / HTTP cookies / server cookies)
>> HTTP cookies are small data created by a web server while a use is browsing a website and placed on the user's computer
or other device by the user's web browser

>> cookies are stored in form of {name:value} format
>> once the cookie is saved in our browser, then on any route , it will be still available on every route of our browser
>> to access/ parse(read)  cookies , we need a cookie-parse middleware , with the help of this we can parse our cookies
-- console.dir(req.cookies); //cookies are part of request object 
   --- this will only work if we have our cookie-parse middleware

:: cookie-parser -> npm package
const cookieParser = require("cookie-parse");
app.use(cookieParser());


>>>
Signed cookies are cookies that include a cryptographic signature to ensure their integrity and authenticity. 
They help confirm that the cookie hasn't been tampered with by the client.

app.use(cookieParser("secretcode"));
eg:
app.get("/getsignedcookie" , (req,res) =>{
    res.cookie("color" , "red" , {signed:true});  // by default signed:false
    res.send("done");
})

if we do (req.cookies) , will give all the unsigned cookies
to get signedcookies -> (req.signedCookies)

>> cookies usually don't have any expiration date, and those cookies are called non-presistant cookies , which browser delete once we close the tab
>> we can set the expiration date for cookies too ! 
like: facebook has 21-day period of cookie expiration , means for 21 days , your data will be stored 
eg: codeforces has a 30-Day login cookie expiration , means for 30days your login credentials will be saved

----
-> when our client interact with our server, this single interaction is called single session

Protocol 
>> these are the set of rules that define how data is transmitted and recieved between devices
-> or -> the rules that our request(client) and response(server) follows are called protocols.


State in Networking
> A state refers to the memory of past interactions between a client and a server.
eg: If a server remembers who you are (like your login info, shopping cart items), that’s state.

Stateful protocols -> they require server to save the status and session information.
eg: ftp : file transfer protocols

stateless protocols -> they does not require the server to retain the server information or status
eg: http: Hyper text transfer protocol


Express Sessions 
-->> An attempt to make our session stateful (making http protocol to save some info)

--A session is a way to store user data between HTTP requests. Since HTTP is stateless, the server normally forgets who the user is after each request.
With sessions, Express can remember things like:

.Whether the user is logged in
.Shopping cart contents
.User preferences

How express session works ?(basic idea)
1-> When a user connects for the first time, Express creates a session ID.
2-> This ID is stored in a cookie on the user's browser.
3-> On every future request, the cookie sends the session ID back to the server
4-> Express uses that ID to retrieve user-specific data from memory or store.

>> data from the server side is stored temporary first , then it goes in the database

> express session is a npm - package

{ connect.sid } => session ID stored in cookie

--> if we are opening multiple tabs of the same link (in a same browser , like opening tabs in chrome) , then only one same session ID will be there in cookies
because browser will know there is only a single user , opening same link on multiple tabs
--> when you change route in the same tab , no new session ID will be created 
>> but if we open the same link on a safari browser then the session ID will be different !

---> Session ID will same as long as
1.You’re using the same browser
2.You’re in the same session
3.The session hasn’t expired or been destroyed 

>> Reloading the Tab also won't change the sessionID


---
Connect-Flash - npm package.
-> The flash is a special area of the session used for storing messages.Messages are written to the flash and cleared 
after being displayed to the user
-> appear single time , vanish after page is refreshed
>>Flash messages are stored in the session. First, setup sessions as usual by enabling cookieParser and session middleware.
Then, use flash middleware provided by connect-flash.
const flash = require("connect-flash");
app.use(flash());

  
req.flash(key , message)   -> will create a flash message
key -> to identify our message 
>> to see this flash message on the client side , we will use "views" /ejs


 ----
AUTHENTICATION & AUTHORIZATION 
 
>> Authentication and authorization are two fundamental concepts in security, 
often used together but serving very different purposes:

-> Authentication is the process of verifying the identity of a user or system. (basically verify who someone is)
>> It confirms who the user is—typically using credentials like a username and password.
think : Prove you are kirsh ?
 -- authentications methods are : Passwords , OTP ,Fingerprints/Face ID  , OAuth(loging into google or facbook)etc


- >Authorization is the process of determining whether an authenticated  
user has permission to access or perform a specific resource or action. (basically verify what specific applications,files,and data a user can access to)
>> It controls what the user is allowed to do after authentication.
think : Now that I know you're Kirsh, can you access the admin dashboard?
 -- authorization methods are :  
                            Role-based control (RBAC)
                            Access control List (ACL)
                            premissions in systems or API's


some basic concepts fall under Auth:

>> Storing Passwords
-> we NEVER store passwords as it is. We store their hashed form

Password ----> HASHING FUNCTION ----> Storing 


Hashing Function
-> A hashing function takes input (like a password) and returns a fixed-size string (called a hash).

>> things to know
. for every input length string , there is a fixed output string length 
. They are one-way functions, we can't get input from output
. for a different input, there is a different output but of same length
. Small changes in input should bring large changes in output


some hashing algorithms : SHA-256 - is fast → good for data integrity, bad for password storage.
                         bcrypt, argon2 -> are intentionally slow , builtin salt , resists brute force attacks. 

Salting
-> Password salting is a technique to protect passwords stored in databases by adding a string of 32 or more characters 
and then hashing them.


passport -> npm library which helps us in authentication , used with node
                        

---
in the project , one feature:
--> going with the authorization , if you are the logged in and you are the owner of that listings then and then only you can delete or edit that listings
if you are not the owner then you can't edit or delete 


MVC - Model View Controller
-> it's a design pattern used to organize code in a way that separates logic into three main parts:

1- Model - The Data
>> Manages data logic 
>> interact with database
>> Doesn’t care how data is shown to the use
eg: A User model that stores names and emails in MongoDB.


2- View - The UI
>> Handles what the user sees (HTML, EJS templates, etc.)
>> Gets data from the controller and displays it
eg: An EJS page that shows a list of users.


3- Controller - The MiddleMan
>> Connects the Model and the View
>> Handles requests from the user
>> Tells the model to fetch/save data
>> Then tells the view to display that data
eg: When a user visits /users, the controller fetches users from the model and renders the view.


---
The router.route() method in Express.js is a convenient way to 
chain multiple HTTP methods (GET, POST, PUT, DELETE, etc.) on the same path.

router.route(path)          // on same path we have multiple methods , so instead of creating routes , we can use the router.route() method
  .get(callback)
  .post(callback)
  .put(callback)
  .delete(callback)
  // other HTTP methods...

// in Router/listing.js
router.route("/")
.get(wrapAsync(listingController.index))
.post( validateListing, isLoggedIn, wrapAsync(listingController.createListing));

we can do this----

